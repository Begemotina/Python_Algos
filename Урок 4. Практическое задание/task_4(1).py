"""
Задание_2. Во втором массиве сохранить индексы четных элементов первого массива.
Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, то во второй массив
надо заполнить значениями 1, 4, 5, 6 (или 0, 3, 4, 5 - если индексация начинается с нуля),
т.к. именно в этих позициях первого массива стоят четные числа.
Подсказка:
Попробуйте решить эту задачу в одну строку (такое решение точно есть)
Пример:
Исходный массив: [8, 3, 15, 6, 4, 2], результат: [0, 3, 4, 5]
"""
from random import random
import timeit


def list_1(n):

    my_list = [int(random() * 100) for x in range(n)]

    result = [i for i in range(len(my_list)) if my_list[i] % 2 == 0]
    return result


def list_2(n):
    result = []
    my_list = [int(random() * 100) for x in range(n)]

    j = 0
    for i in my_list:
        if i % 2 == 0:
            result.append(j)
        j += 1
    return result


n = int(input('сколько элементов в массиве: '))

print(list_1(n))
print(list_2(n))

print(timeit.timeit("list_1(n)", setup="from __main__ import list_1, n", number=100))
print(timeit.timeit("list_2(n)", setup="from __main__ import list_2, n", number=100))

"""
количество элелемнтов - 10
генератор списка - 0.000502699999999745
цикл             - 0.00046480000000004296

количество элелемнтов - 100
генератор списка - 0.003635099999999447
цикл             - 0.0036858000000004054

количество элелемнтов - 1000
генератор списка - 0.03502480000000041
цикл             - 0.028759400000000213


количество элелемнтов - 10000
генератор списка - 0.29605380000000014
цикл             - 0.3018287000000006

количество элелемнтов - 100000
генератор списка - 2.9444459
цикл             - 3.1881096000000007

количество элелемнтов - 10000000
генератор списка - 312.1222974
цикл             - 332.68707909999995

Сложность линейная O(n)
 Итоги.
 Генератор спска как и ожидалось рабоатет быстрее, но при линейной сложности, в целом нет разницы чего использовать.
 время выполнения в большей части будет зависеть от "железа" нежели от способа реализации. 
 
"""

